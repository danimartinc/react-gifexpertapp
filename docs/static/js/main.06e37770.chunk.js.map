{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","event","preventDefault","trim","length","catgs","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAMaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAGTC,mBAAS,IAHA,mBAGtCC,EAHsC,KAG1BC,EAH0B,KAyB9C,OACI,sBAAMC,SAfW,SAACC,GAElBA,EAAMC,iBAEFJ,EAAWK,OAAOC,OAAS,IAI/BR,GAAe,SAAAS,GAAK,OAAMP,GAAN,mBAAqBO,OAEzCN,EAAc,MAKd,SACI,uBACIO,KAAK,OACLC,MAAST,EACTU,SAxBc,SAAEP,GAExBF,EAAeE,EAAMQ,OAAOF,a,+BCZrBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAIfC,EAJe,iDAIkCC,UAAUH,GAJ5C,+DAKFI,MAAOF,GALL,cAKfG,EALe,gBAOEA,EAAKC,OAPP,uBAObC,EAPa,EAObA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAO,IAAD,EAGzB,MAAM,CACFC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MAEXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAhBrB,kBAoBfM,GApBe,4CAAH,sDCATO,EAAc,SAAC,GAAqB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAElC,OACI,sBAAKc,UAAU,yCAAf,UACE,qBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,4BAAKA,QCHFO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECIb,SAAEA,GAAe,IAAD,EAEdd,mBAAS,CAE/BqB,KAAM,GAENa,SAAS,IAN2B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KA2BxC,OAhBCC,qBAAU,WAGPxB,EAASC,GACDwB,MAAM,SAAAC,GACFH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAI3B,CAEEpB,IAGGqB,EDzB0BK,CAAc1B,GAAjCa,EANuB,EAM7BN,KAAaa,EANgB,EAMhBA,QAErB,OACI,qCACA,6BAAMpB,IAEJoB,GAAW,mBAAGJ,UAAU,oCAAb,qBACb,qBAAKA,UAAU,6CAAf,SAGYH,EAAOJ,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAGQA,GAFCA,EAAIC,aElBxBgB,EAAe,WAAM,MAGMzC,mBAAS,CAAC,cAHhB,mBAGvB0C,EAHuB,KAGX3C,EAHW,KAuB9B,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAEA,6BAEI2C,EAAWnB,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAEIA,SAAWA,GADLA,Y,MC/B9B6B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.06e37770.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n//Recibimos las props, desestructurando los argumentos\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n\r\n    //Estado, necesito saber lo que el usuario esta escribiendo\r\n    const [ inputValue, setInputValue] = useState(''); \r\n\r\n    //Metodo que extrae el valor del input\r\n    const handleInputChange = ( event ) => {\r\n       //Tenemos el inputValue actualizado con lo ultimo que el usuario ha escrito\r\n        setInputValue( event.target.value );\r\n    }\r\n    //Metodo que \r\n    const handleSubmit = (event) => {\r\n        //Para prevenir el comportamiento por defecto del formulario\r\n        event.preventDefault();\r\n       //Validacion: \r\n        if( inputValue.trim().length > 2){\r\n        //console.log('Sumbit hecho');\r\n        //Llamamos a la props de setCategories de AddCategory\r\n        //No tengo acceso a las categorias directamente porque no lo estoy pasando como argumento\r\n        setCategories( catgs => [ inputValue, ...catgs] );\r\n        //Borrar el valor para que no se pueda hacer un doble posteo\r\n        setInputValue('');\r\n\r\n        }\r\n    }\r\n    return (\r\n        <form onSubmit={ handleSubmit }>\r\n            <input \r\n                type=\"text\"\r\n                value= { inputValue }\r\n                onChange={ handleInputChange }\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\n//Implementar un propTypes para setCategorias, donde setCategorias sea una funcion requerida para este componente\r\n//Obligamos a enviar esta funcions\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n","//Los helpers, funciones que hacen un trabajo en especifico, que reciben argumentos lo procesan y hacen un return de informacion\r\n//No hace falta que renderizen el useState\r\n  export const getGifs = async( category ) => {\r\n\r\n    //Peticion HTTP para traer las iamgenes por una categoria\r\n    //La categoria puede tener espacios, y para solucinarlo aplicamos encodeURI()\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=DcVIrDV8VPLxpv2hqIg6ZLVqhbFCxTnX`;\r\n    const resp = await fetch( url );\r\n    //Desectruturamos porque me interesa la data que viene dentro de la data\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map( img =>{\r\n        //Transforma cada uno de los elementos que esta dentro del array data\r\n        //Retorno un objeto con la informacion que me interesa a mi\r\n        return{\r\n            id: img.id,\r\n            title: img.title,\r\n            //Con ?, indicamos que pregunte si tiene las imagenes y si es asi lo utilice\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    });\r\n   //Como la funcion es async() no devuelve directamnte los gifs si no que retorna una promesa que resuelve la colecion de las imagenes\r\n   return gifs;\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ( { title, url }) => {\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n          <img src={ url } alt={ title } />\r\n          <p>{ title }</p>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState }  from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n    //Nos creamos un nuevo estado. Cuando se carga por primera vez el array esta vacio\r\n    //const [images, setImages] = useState([]);\r\n\r\n    //Uso el CustomHook. Desectructuramos\r\n    const { data: images,loading } = useFetchGifs( category );\r\n\r\n    return (\r\n        <>\r\n        <h3>{ category }</h3>\r\n\r\n        { loading && <p className=\"animate__animated animate__fadeIn\">Loading</p> }\r\n        <div className=\"card-grid animate__animated animate__flash\">\r\n           {\r\n                    //Desctruturamos el objeto img\r\n                    images.map( img =>(\r\n                        <GifGridItem\r\n                           key={ img.id }\r\n                           //Envio como argumento un nuevo objeto. Envio cada una de las propiedades de las imagenes como una propiedad independitne\r\n                           { ...img } \r\n                        />\r\n                    ))\r\n            }\r\n                   \r\n        </div>\r\n      </>\r\n    )\r\n}\r\n","//Un CustomHook que nos permite que cuando el componente carga, realizar la peticion fetch e indicar cuando estoy cargamdo y cuando termina la carga\r\n//Custom Hooks, forma de extraer logica de algun componente o reutilizar logica o extraerla de tal manera que sea sencillo utilizarla nuevamente\r\n\r\n//Importar React solo es necesario si devolvemos RXJS\r\nimport { useState, useEffect } from 'react';\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n\r\n    const [state, setState] = useState({\r\n        //El estado inicial es un objeto que tiene un array vacio\r\n        data: [],\r\n        //Cuando tenemos este Hook tenemos el estado cargando por defecto\r\n        loading: true\r\n    });\r\n\r\n    //useEffect(), me permite usar un codigo de manera condicional. Puedo utilizarlo en los CustomHooks\r\n    //NO PUEDEN SER ASYNC PORQUE ESPERAN ALGO SINCRONO\r\n     useEffect(() =>{\r\n        //Solo quiero que se ejecute esta funcion cuando el componente es renderizado por primera vez\r\n        //Retorna una promesa\r\n        getGifs( category )\r\n               .then( imgs => {\r\n                    setState({\r\n                        data: imgs,\r\n                        loading: false\r\n                    });\r\n               });\r\n              \r\n    },[//Mandamos una lista de dependencias en forma de array\r\n       //Evaluo tan solo cuando la cateogira cambia\r\n        category     \r\n    ])\r\n\r\n    return state; // { data:[], loading: true }\r\n\r\n\r\n}","import React, { useState } from \"react\";\r\nimport { AddCategory } from \"./components/AddCategory\";\r\nimport { GifGrid } from \"./components/GifGrid\";\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    //Usamos el hook de useState\r\n    const [categories, setCategories] = useState(['One Punch']);\r\n\r\n    //Funcion que añade un elemento al array, con setCategories\r\n    /*const handleAdd = () => {\r\n       //Añadimos un elemento al array\r\n       //NO ES BUENA PRACTICA HACERLO ASI, NO DEBEMOS USAR EL PUSH\r\n       //categories.push('HunterXHunter');\r\n       //console.log( categories );\r\n       //Para cambiar las propiedades, y indicar a react que el estado cambió\r\n       //Con el setCategories le cambiamos el estado anterior y creamos un nuevo estado\r\n\r\n       //PRIMERA SOLUCION\r\n       //setCategories( 'HunterXHunter', [...categories]);\r\n       //SEGUNDA SOLUCION\r\n       //Tiene un callback, en el cual el primer argumento es el valor del estado anterior y devuelve el nuevo estado\r\n       setCategories( catgs => [...catgs, 'HunterXHunter'] );\r\n    }*/\r\n\r\n     \r\n   //Podemos enviar funciones desde un componente padre a un componente hijo\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={ setCategories } />\r\n            <hr/>\r\n\r\n            <ol>\r\n             {\r\n                categories.map( category => (\r\n                    <GifGrid\r\n                        key= {category}\r\n                        category={ category } \r\n                    />\r\n                ))\r\n             }\r\n            </ol>\r\n            \r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);"],"sourceRoot":""}